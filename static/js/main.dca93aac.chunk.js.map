{"version":3,"sources":["ApiCalls/ApiCall.js","Utils/AuthContext.js","reducers/index.js","reducers/RegisterReducer.js","reducers/FeedsReducer.js","reducers/PostGifReducer.js","reducers/ViewArticleReducer.js","reducers/ViewGifReducer.js","reducers/CommentReducer.js","reducers/GlobalReducer.js","store/store.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["ApiCall","axios","create","baseURL","auth","createContext","AuthProvider","children","Provider","value","data","type","localStorage","setItem","AuthData","allReducers","combineReducers","login","state","action","signup","feeds","FeedsLoading","MyArticles","MyGifs","gifUploading","getAnArticle","getAnArticleLoading","getAGif","getAGifLoading","PostCommentLoading","refresh","store","createStore","applyMiddleware","thunk","LandingPage","lazy","Signup","Signin","CreateArticle","GifUpload","MyFeeds","EditArticle","Timeline","NotFound","ViewArticle","ViewGif","Routes","fallback","exact","path","component","App","useEffect","token","getItem","defaults","headers","common","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dca93aac.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// create an instance of axios\r\nconst ApiCall = axios.create({\r\n  baseURL: \"https://team-work-api.herokuapp.com/api/v1/\",\r\n});\r\n\r\n\r\nexport default ApiCall;","import React, { createContext } from \"react\";\r\n\r\nexport const auth = createContext();\r\n\r\nconst AuthProvider = ({ children }) => {\r\n  const Authenticate = (data) => {\r\n    switch (data.type) {\r\n      case \"set-auth\":\r\n        localStorage.setItem(\"auth-data\", data.AuthData);\r\n        break;\r\n        default:\r\n            return data;\r\n    }\r\n  };\r\n  return <auth.Provider value={[Authenticate]}>{children}</auth.Provider>;\r\n};\r\n\r\nexport default AuthProvider;\r\n","import { combineReducers } from 'redux';\r\nimport { loginReducer, SignupReducer } from './RegisterReducer';\r\nimport { Feeds, FeedsLoading, MyArticles, MyGifs } from './FeedsReducer';\r\nimport { gifUploading } from './PostGifReducer';\r\nimport { getAnArticle, getAnArticleLoading } from './ViewArticleReducer';\r\nimport { getAGif, getAGifLoading } from './ViewGifReducer';\r\nimport { refresh } from './GlobalReducer';\r\nimport { PostCommentLoading } from './CommentReducer';\r\n\r\nconst allReducers = combineReducers({\r\n    login: loginReducer,\r\n    signup: SignupReducer,\r\n    feeds: Feeds,\r\n    FeedsLoading,\r\n    MyArticles,\r\n    MyGifs,\r\n    gifUploading,\r\n    getAnArticle,\r\n    getAnArticleLoading,\r\n    getAGif,\r\n    getAGifLoading,\r\n    PostCommentLoading,\r\n    refresh\r\n    \r\n    // loading\r\n});\r\n\r\nexport default allReducers;","export const loginReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n     return state = true;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const SignupReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case \"SIGNUP\":\r\n         return state = true;\r\n        default:\r\n          return state;\r\n      }\r\n};\r\n","export const Feeds = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'FEEDS':\r\n      return state = action.data;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport const FeedsLoading = (state = true, action) => {\r\n  switch (action.type) {\r\n    case 'FEEDS_LOADING':\r\n      return state = false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const MyArticles = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'MY_ARTICLES':\r\n      return state = action.data;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const MyGifs = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'MY_GIFS':\r\n      return state = action.data;\r\n    default:\r\n      return state;\r\n  }\r\n}","export const gifUploading = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'GIF_UPLOADING':\r\n          return state = action.data;\r\n        default:\r\n          return state;\r\n      }\r\n}","export const getAnArticle = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"VIEW_ARTICLE\":\r\n      return (state = action.data);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getAnArticleLoading = (state = true, action) => {\r\n  switch (action.type) {\r\n    case \"VIEW_ARTICLE_LOADING\":\r\n      return (state = false);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const getAGif = (state = [], action) => {\r\n    switch (action.type) {\r\n      case \"VIEW_GIF\":\r\n        return (state = action.data);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export const getAGifLoading = (state = true, action) => {\r\n    switch (action.type) {\r\n      case \"VIEW_GIF_LOADING\":\r\n        return (state = false);\r\n      default:\r\n        return state;\r\n    }\r\n  };","export const PostCommentLoading = (state = false, action) => {\r\n    switch (action.type) {\r\n      case \"POST_COMMENT_LOADING\":\r\n        return (state = action.data);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n","export const refresh = (state = false, action) => {\r\n    switch (action.type) {\r\n      case \"REFRESH\":\r\n        return (state = action.data);\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  // export const loading = (state = true, action) => {\r\n  //   switch (action.type) {\r\n  //     case \"LOADING\":\r\n  //       return (state = false);\r\n  //     default:\r\n  //       return state;\r\n  //   }\r\n  // };","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport allReducers from '../reducers/index';\r\n\r\nconst store = createStore(\r\n    allReducers,\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport default store;","import React , { lazy, Suspense } from 'react';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\nconst LandingPage = lazy(() => import('../Containers/LandingPage/LandingPage'));\r\nconst Signup = lazy(() => import('../Containers/Signup/Signup'));\r\nconst Signin = lazy(() => import('../Containers/Signin/Signin')) ;\r\nconst CreateArticle = lazy(() => import('../Containers/CreateArticle/CreateArticle'));\r\nconst GifUpload = lazy(() => import('../Containers/GifUpload/GifUpload'));\r\nconst MyFeeds = lazy(() => import('../Containers/MyFeeds/MyFeeds'));\r\nconst EditArticle = lazy(() => import('../Containers/EditArticle/EditArticle'));\r\nconst Timeline = lazy(() => import('../Containers/Timeline/Timeline'));\r\nconst NotFound = lazy(() => import('../components/NotFound/NotFound'));\r\nconst ViewArticle = lazy(() => import('../Containers/ViewArticle/ViewArticle'));\r\nconst ViewGif = lazy(() => import('../Containers/ViewGif/ViewGif'));\r\n\r\nconst Routes = () => {\r\n        return(\r\n            <Suspense fallback='loading'>\r\n            <Router>\r\n            <div>\r\n            <Switch>\r\n             <Route exact path='/' component={LandingPage} />\r\n             <Route path='/register' component={Signup} />\r\n             <Route path='/login' component={Signin} />\r\n             <Route exact path='/create-article' component={CreateArticle} />\r\n             <Route path='/article/:id' component={ViewArticle} />\r\n             <Route path='/edit-article/:id' component={EditArticle} />\r\n             <Route exact path='/gif' component={GifUpload} />\r\n             <Route path='/gif/:id' component={ViewGif} />\r\n             <Route path='/my-posts' component={MyFeeds} />\r\n             <Route path='/feeds' component={Timeline} />\r\n             <Route component={NotFound} />\r\n             </Switch>\r\n             <NotificationContainer />\r\n            </div>\r\n            </Router>\r\n            </Suspense>\r\n        );\r\n}\r\n\r\nexport default Routes;","import React, { useEffect } from 'react';\r\nimport Routes from './routes/routes';\r\nimport ApiCall from './ApiCalls/ApiCall';\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if(token) {\r\n      ApiCall.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n  }, []);\r\n\r\n    return (\r\n      <Routes />\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport AuthProvider from \"./Utils/AuthContext\";\nimport store from './store/store';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </Provider>\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}